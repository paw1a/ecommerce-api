// Code generated by mockery v2.12.1. DO NOT EDIT.

package mocks_repository

import (
	context "context"

	domain "github.com/paw1a/ecommerce-api/internal/domain"
	dto "github.com/paw1a/ecommerce-api/internal/domain/dto"

	mock "github.com/stretchr/testify/mock"

	primitive "go.mongodb.org/mongo-driver/bson/primitive"

	testing "testing"
)

// Products is an autogenerated mock type for the Products type
type Products struct {
	mock.Mock
}

// Create provides a mock function with given fields: ctx, product
func (_m *Products) Create(ctx context.Context, product domain.Product) (domain.Product, error) {
	ret := _m.Called(ctx, product)

	var r0 domain.Product
	if rf, ok := ret.Get(0).(func(context.Context, domain.Product) domain.Product); ok {
		r0 = rf(ctx, product)
	} else {
		r0 = ret.Get(0).(domain.Product)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, domain.Product) error); ok {
		r1 = rf(ctx, product)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Delete provides a mock function with given fields: ctx, productID
func (_m *Products) Delete(ctx context.Context, productID primitive.ObjectID) error {
	ret := _m.Called(ctx, productID)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, primitive.ObjectID) error); ok {
		r0 = rf(ctx, productID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FindAll provides a mock function with given fields: ctx
func (_m *Products) FindAll(ctx context.Context) ([]domain.Product, error) {
	ret := _m.Called(ctx)

	var r0 []domain.Product
	if rf, ok := ret.Get(0).(func(context.Context) []domain.Product); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.Product)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindByID provides a mock function with given fields: ctx, productID
func (_m *Products) FindByID(ctx context.Context, productID primitive.ObjectID) (domain.Product, error) {
	ret := _m.Called(ctx, productID)

	var r0 domain.Product
	if rf, ok := ret.Get(0).(func(context.Context, primitive.ObjectID) domain.Product); ok {
		r0 = rf(ctx, productID)
	} else {
		r0 = ret.Get(0).(domain.Product)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, primitive.ObjectID) error); ok {
		r1 = rf(ctx, productID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: ctx, productInput, productID
func (_m *Products) Update(ctx context.Context, productInput dto.UpdateProductInput, productID primitive.ObjectID) (domain.Product, error) {
	ret := _m.Called(ctx, productInput, productID)

	var r0 domain.Product
	if rf, ok := ret.Get(0).(func(context.Context, dto.UpdateProductInput, primitive.ObjectID) domain.Product); ok {
		r0 = rf(ctx, productInput, productID)
	} else {
		r0 = ret.Get(0).(domain.Product)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, dto.UpdateProductInput, primitive.ObjectID) error); ok {
		r1 = rf(ctx, productInput, productID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewProducts creates a new instance of Products. It also registers the testing.TB interface on the mock and a cleanup function to assert the mocks expectations.
func NewProducts(t testing.TB) *Products {
	mock := &Products{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
