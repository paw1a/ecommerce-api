// Code generated by mockery v2.12.1. DO NOT EDIT.

package mocks_repository

import (
	context "context"

	domain "github.com/paw1a/ecommerce-api/internal/domain"
	dto "github.com/paw1a/ecommerce-api/internal/domain/dto"

	mock "github.com/stretchr/testify/mock"

	primitive "go.mongodb.org/mongo-driver/bson/primitive"

	testing "testing"
)

// Orders is an autogenerated mock type for the Orders type
type Orders struct {
	mock.Mock
}

// Create provides a mock function with given fields: ctx, order
func (_m *Orders) Create(ctx context.Context, order domain.Order) (domain.Order, error) {
	ret := _m.Called(ctx, order)

	var r0 domain.Order
	if rf, ok := ret.Get(0).(func(context.Context, domain.Order) domain.Order); ok {
		r0 = rf(ctx, order)
	} else {
		r0 = ret.Get(0).(domain.Order)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, domain.Order) error); ok {
		r1 = rf(ctx, order)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Delete provides a mock function with given fields: ctx, orderID
func (_m *Orders) Delete(ctx context.Context, orderID primitive.ObjectID) error {
	ret := _m.Called(ctx, orderID)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, primitive.ObjectID) error); ok {
		r0 = rf(ctx, orderID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FindAll provides a mock function with given fields: ctx
func (_m *Orders) FindAll(ctx context.Context) ([]domain.Order, error) {
	ret := _m.Called(ctx)

	var r0 []domain.Order
	if rf, ok := ret.Get(0).(func(context.Context) []domain.Order); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.Order)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindByID provides a mock function with given fields: ctx, orderID
func (_m *Orders) FindByID(ctx context.Context, orderID primitive.ObjectID) (domain.Order, error) {
	ret := _m.Called(ctx, orderID)

	var r0 domain.Order
	if rf, ok := ret.Get(0).(func(context.Context, primitive.ObjectID) domain.Order); ok {
		r0 = rf(ctx, orderID)
	} else {
		r0 = ret.Get(0).(domain.Order)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, primitive.ObjectID) error); ok {
		r1 = rf(ctx, orderID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindByUserID provides a mock function with given fields: ctx, userID
func (_m *Orders) FindByUserID(ctx context.Context, userID primitive.ObjectID) ([]domain.Order, error) {
	ret := _m.Called(ctx, userID)

	var r0 []domain.Order
	if rf, ok := ret.Get(0).(func(context.Context, primitive.ObjectID) []domain.Order); ok {
		r0 = rf(ctx, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.Order)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, primitive.ObjectID) error); ok {
		r1 = rf(ctx, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: ctx, orderInput, orderID
func (_m *Orders) Update(ctx context.Context, orderInput dto.UpdateOrderInput, orderID primitive.ObjectID) (domain.Order, error) {
	ret := _m.Called(ctx, orderInput, orderID)

	var r0 domain.Order
	if rf, ok := ret.Get(0).(func(context.Context, dto.UpdateOrderInput, primitive.ObjectID) domain.Order); ok {
		r0 = rf(ctx, orderInput, orderID)
	} else {
		r0 = ret.Get(0).(domain.Order)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, dto.UpdateOrderInput, primitive.ObjectID) error); ok {
		r1 = rf(ctx, orderInput, orderID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewOrders creates a new instance of Orders. It also registers the testing.TB interface on the mock and a cleanup function to assert the mocks expectations.
func NewOrders(t testing.TB) *Orders {
	mock := &Orders{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
